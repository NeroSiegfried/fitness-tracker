generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  hashedPassword    String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  accounts          Account[]
  sessions          Session[]
  
  // Fitness app specific fields
  fitnessProfile    FitnessProfile?
  workoutPlans      WorkoutPlan[]
  mealPlans         MealPlan[]
  workoutLogs       WorkoutLog[]
  forumPosts        ForumPost[]
  forumComments     ForumComment[]
  karma             Int       @default(0)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FitnessProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  skillLevel        String   // beginner, intermediate, advanced
  fitnessGoal       String   // lose weight, gain muscle, gain strength
  workoutDuration   Int      // minutes per session
  targetMuscleGroups String[] // array of muscle groups
  height            Float?   // in cm
  weight            Float?   // in kg
  age               Int?
  gender            String?
  dietaryRestrictions String[] // vegetarian, vegan, keto, etc.
  workoutsPerWeek   Int?
  splitCount        Int?     // number of workout splits
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkoutPlan {
  id                String   @id @default(cuid())
  userId            String
  name              String
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  workoutDays       WorkoutDay[]
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkoutDay {
  id                String   @id @default(cuid())
  workoutPlanId     String
  name              String   // e.g., "Day 1: Chest & Triceps"
  dayOfWeek         Int?     // 0-6 for Sunday-Saturday
  targetMuscleGroups String[]
  
  exercises         Exercise[]
  workoutPlan       WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
}

model Exercise {
  id                String   @id @default(cuid())
  workoutDayId      String
  name              String
  sets              Int
  repsPerSet        String   // e.g., "8-12" or "5"
  weight            Float?   // in kg, null if bodyweight
  restTime          Int?     // in seconds
  notes             String?
  muscleGroups      String[]
  videoUrl          String?
  isCustom          Boolean  @default(false)
  
  workoutDay        WorkoutDay @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  workoutLogs       WorkoutLog[]
}

model WorkoutLog {
  id                String   @id @default(cuid())
  userId            String
  exerciseId        String
  date              DateTime
  setsCompleted     Int
  repsCompleted     String   // e.g., "10,8,8,6"
  weightUsed        Float    // in kg
  notes             String?
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise          Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model MealPlan {
  id                String   @id @default(cuid())
  userId            String
  name              String
  description       String?
  totalCalories     Int
  protein           Float    // in grams
  carbs             Float    // in grams
  fat               Float    // in grams
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  meals             Meal[]
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Meal {
  id                String   @id @default(cuid())
  mealPlanId        String
  name              String
  description       String?
  mealType          String   // breakfast, lunch, dinner, snack
  calories          Int
  protein           Float    // in grams
  carbs             Float    // in grams
  fat               Float    // in grams
  recipe            String?  @db.Text
  imageUrl          String?
  
  mealPlan          MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
}

model ForumPost {
  id                String   @id @default(cuid())
  userId            String
  title             String
  content           String   @db.Text
  upvotes           Int      @default(0)
  downvotes         Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  comments          ForumComment[]
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ForumComment {
  id                String   @id @default(cuid())
  postId            String
  userId            String
  content           String   @db.Text
  upvotes           Int      @default(0)
  downvotes         Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  post              ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

